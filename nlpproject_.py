# -*- coding: utf-8 -*-
"""NLPProject .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EGFa_dubTQzj4z16-Rl9UUYocbaB4Jnv
"""

!pip install transformers datasets sentencepiece evaluate sacrebleu gradio --quiet

import pandas as pd
import numpy as np
import torch
from datasets import Dataset
from sklearn.model_selection import train_test_split
import evaluate
from transformers import (
    AutoTokenizer,
    AutoModelForSeq2SeqLM,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer
)

# Load data
from google.colab import files
uploaded = files.upload()
df = pd.read_csv(next(iter(uploaded)))

# Clean and prepare data
df = df.rename(columns={
    "English words/sentences": "en",
    "French words/sentences": "fr"
})

# Clean text
df['en'] = df['en'].astype(str).str.strip().str.lower()
df['fr'] = df['fr'].astype(str).str.strip().str.lower()

# Remove empty/NA values
df = df[(df['en'] != '') & (df['fr'] != '')]
df = df.dropna()

train_df, temp_df = train_test_split(df, test_size=0.2, random_state=42)
val_df, test_df = train_test_split(temp_df, test_size=0.5, random_state=42)

# Convert to Hugging Face datasets
train_dataset = Dataset.from_pandas(train_df)
val_dataset = Dataset.from_pandas(val_df)
test_dataset = Dataset.from_pandas(test_df)

print(f"\nTraining samples: {len(train_dataset)}")
print(f"Validation samples: {len(val_dataset)}")

model_name = "Helsinki-NLP/opus-mt-en-fr"
tokenizer = AutoTokenizer.from_pretrained(model_name)

def tokenize_function(examples):
    return tokenizer(
        text=examples["en"],
        text_target=examples["fr"],
        max_length=128,
        truncation=True,
        padding="max_length",
        return_tensors="np"
    )

# Tokenize datasets
tokenized_train = train_dataset.map(tokenize_function, batched=True)
tokenized_val = val_dataset.map(tokenize_function, batched=True)
tokenized_test = test_dataset.map(tokenize_function, batched=True)

print("\nTokenized sample:")
print(tokenized_train[0])

# Load model
device = "cuda" if torch.cuda.is_available() else "cpu"
model = AutoModelForSeq2SeqLM.from_pretrained(model_name).to(device)

# Metric
metric = evaluate.load("sacrebleu")

def compute_metrics(eval_preds):
    preds, labels = eval_preds
    if isinstance(preds, tuple):
        preds = preds[0]

    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    decoded_preds = [pred.strip() for pred in decoded_preds]
    decoded_labels = [[label.strip()] for label in decoded_labels]

    result = metric.compute(predictions=decoded_preds, references=decoded_labels)
    return {"bleu": result["score"]}

# Training arguments
training_args = Seq2SeqTrainingArguments(
    output_dir="./results",
    eval_strategy="epoch",
    learning_rate=3e-5,
    per_device_train_batch_size=32,
    per_device_eval_batch_size=32,
    num_train_epochs=3,
    weight_decay=0.01,
    save_total_limit=3,
    predict_with_generate=True,
    logging_strategy="epoch",
    save_strategy="epoch",
    load_best_model_at_end=True,
    metric_for_best_model="bleu",
    greater_is_better=True,
    report_to="none"
)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_train,
    eval_dataset=tokenized_val,
    compute_metrics=compute_metrics
)

print("Starting training...")
train_results = trainer.train()
print("Training completed!")

# Evaluate on test set
test_results = trainer.evaluate(tokenized_test, metric_key_prefix="test")
print(f"\nTest BLEU score: {test_results['test_bleu']:.2f}")

# Sample translation
sample = test_dataset[0]
inputs = tokenizer(sample["en"], return_tensors="pt").to(device)
with torch.no_grad():
    outputs = model.generate(**inputs, max_length=128)

print("\nSample Translation:")
print(f"English: {sample['en']}")
print(f"French (true): {sample['fr']}")
print(f"French (pred): {tokenizer.decode(outputs[0], skip_special_tokens=True)}")

def translate(text):
    inputs = tokenizer(text, return_tensors="pt").to(device)
    with torch.no_grad():
        outputs = model.generate(**inputs, max_length=128)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

import gradio as gr


iface = gr.Interface(
    fn=translate,
    inputs=gr.Textbox(label="English"),
    outputs=gr.Textbox(label="French"),
    title="English to French Translator",
    examples=[["Hello, how are you?"], ["What is your name?"]]
)

iface.launch()